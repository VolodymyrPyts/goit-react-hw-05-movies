{"version":3,"file":"static/js/222.31a7d427.chunk.js","mappings":"4TAEAA,IAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAO,mCAEAC,EAAc,mCAAG,6GAEDF,IAAAA,IAAA,uCAA0CC,IAFzC,cAElBE,EAFkB,yBAGjBA,EAASC,MAHQ,gCAMxBC,QAAQC,IAAR,MANwB,yDAAH,qDAWdC,EAAiB,mCAAG,WAAMC,GAAN,gGAEJR,IAAAA,IAAA,gCAAmCC,EAAnC,iCAAgEO,EAAhE,yBAFI,cAErBL,EAFqB,yBAGpBA,EAASC,MAHW,gCAM3BC,QAAQC,IAAR,MAN2B,yDAAH,sDAUjBG,EAAe,mCAAG,WAAMC,GAAN,gGAEFV,IAAAA,IAAA,iBAAoBU,EAApB,oBAAuCT,EAAvC,oBAFE,cAEnBE,EAFmB,yBAGlBA,EAASC,MAHS,gCAMzBC,QAAQC,IAAR,MANyB,yDAAH,sDAUfK,EAAe,mCAAG,WAAMD,GAAN,gGAEFV,IAAAA,IAAA,iBAAoBU,EAApB,4BAA+CT,EAA/C,oBAFE,cAEnBE,EAFmB,yBAGlBA,EAASC,MAHS,gCAMzBC,QAAQC,IAAR,MANyB,yDAAH,sDAUfM,EAAe,mCAAG,WAAMF,GAAN,gGAEFV,IAAAA,IAAA,iBAAoBU,EAApB,4BAA+CT,EAA/C,oBAFE,cAEnBE,EAFmB,yBAGlBA,EAASC,MAHS,gCAMzBC,QAAQC,IAAR,MANyB,yDAAH,qD,yKC5CfO,EAAcC,EAAAA,GAAAA,IAAH,sHAOXC,EAAQD,EAAAA,GAAAA,IAAH,uCAGLE,EAAOF,EAAAA,GAAAA,EAAH,iGAMJG,EAAYH,EAAAA,GAAAA,EAAH,oF,SCMtB,EArBiB,SAAC,GAAgB,IAAdI,EAAa,EAAbA,OAClB,OACE,SAACL,EAAD,UACGK,EAAOC,KAAI,gBAAGC,EAAH,EAAGA,UAAWC,EAAd,EAAcA,aAAcC,EAA5B,EAA4BA,cAAeC,EAA3C,EAA2CA,UAA3C,OACV,4BACE,SAACR,EAAD,CACES,IACEH,EAAY,yCAC0BA,GAD1B,oDAIdI,IAAKH,KAEP,SAACN,EAAD,UAAOM,KACP,UAACL,EAAD,eAAaG,EAAb,SAVQG,EADA,KAgBjB,ECpBYG,EAAgBZ,EAAAA,GAAAA,IAAH,0DCiC1B,EA7Ba,WACX,IAAQa,GAAOC,EAAAA,EAAAA,MAAPD,GACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAgBA,OAdAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,gHAEuBrB,EAAAA,EAAAA,IAAgBgB,GAFvC,cAEUvB,EAFV,OAGU6B,EAAO7B,EAAK6B,KAClBF,EAAWE,GAJf,mDAOI5B,QAAQC,IAAR,MAPJ,0DADc,uBAAC,WAAD,wBAWd4B,EACD,GAAE,CAACP,KAGF,SAACD,EAAD,UACGI,EAAQK,OAAS,GAChB,SAAC,EAAD,CAAUjB,OAAQY,IAElB,kCAIP,C","sources":["Services/Api.js","components/Cast/CastList/CastList.styled.js","components/Cast/CastList/CastList.jsx","components/Cast/Cast.styled.js","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst _KEY = 'f70abac86533d424df79b342ee8b9ff4';\n\nexport const getTrendMovies = async() => {\n  try {\n      const response = await axios.get(`/trending/movie/week?api_key=${_KEY}`); \n      return response.data;\n  }\n  catch (error) {\n      console.log(error);\n  }\n};\n\n\nexport const getSearchedMovies = async(query) => {\n  try {\n      const response = await axios.get(`/search/movie?api_key=${_KEY}&language=en-US&query=${query}&include_adult=false`);       \n      return response.data;\n  }\n  catch (error) {\n      console.log(error);\n  }\n};\n\nexport const getMovieDetails = async(movieId) => {\n  try {\n      const response = await axios.get(`/movie/${movieId}?api_key=${_KEY}&language=en-US`); \n      return response.data;\n  }\n  catch (error) {\n      console.log(error);\n  }\n};\n\nexport const getMovieCredits = async(movieId) => {\n  try {\n      const response = await axios.get(`/movie/${movieId}/credits?api_key=${_KEY}&language=en-US`); \n      return response.data;\n  }\n  catch (error) {\n      console.log(error);\n  }\n};\n\nexport const getMovieRewiews = async(movieId) => {\n  try {\n      const response = await axios.get(`/movie/${movieId}/reviews?api_key=${_KEY}&language=en-US`); \n      return response.data;\n  }\n  catch (error) {\n      console.log(error);\n  }\n};\n","import styled from \"styled-components\";\n\nexport const CastWrapper = styled.div`\ndisplay: grid;\npadding: 32px;\ngap: 48px;\n grid-template-columns: repeat(auto-fit, 260px);\n`\n\nexport const Photo = styled.img`\nwidth: 260px;\n`\nexport const Name = styled.p`\nfont-size: 24px;\nfont-weight: 500;\ntext-align: center;\npadding: 8px;\n`\nexport const Character = styled.p`\nfont-size: 24px;\nfont-style: italic;\ntext-align: center;\n`","import { PropTypes } from 'prop-types';\nimport { CastWrapper, Photo, Name, Character } from './CastList.styled';\n\nconst CastList = ({ actors }) => {\n  return (\n    <CastWrapper>\n      {actors.map(({ character, profile_path, original_name, credit_id }) => (\n        <div key={credit_id}>\n          <Photo\n            src={\n              profile_path\n                ? `https://image.tmdb.org/t/p/w200${profile_path}`\n                : `https://via.placeholder.com/260x390?text=No+Photo`\n            }\n            alt={original_name}\n          />\n          <Name>{original_name}</Name>\n          <Character>\"{character}\"</Character>\n        </div>\n      ))}\n    </CastWrapper>\n  );\n};\n\nexport default CastList;\n\nCastList.propTypes = {\n  actors: PropTypes.arrayOf(\n    PropTypes.shape({\n      credit_id: PropTypes.string,\n      poster_path: PropTypes.string,\n      original_name: PropTypes.string,\n      character: PropTypes.string,\n    })\n  ).isRequired,\n};","import styled from 'styled-components';\n\nexport const CastContainer = styled.div`\npadding: 32px;\nfont-size: 24px;\n`","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCredits } from '../../Services/Api';\nimport CastList from './CastList/CastList';\nimport { CastContainer } from './Cast.styled';\n\nconst Cast = () => {\n  const { id } = useParams();\n  const [credits, setCredits] = useState([]);\n\n  useEffect(() => {\n    async function getCredits() {\n      try {\n        const data = await getMovieCredits(id);\n        const cast = data.cast;\n        setCredits(cast);\n        return;\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    getCredits();\n  }, [id]);\n\n  return (\n    <CastContainer>\n      {credits.length > 0 ? (\n        <CastList actors={credits} />\n      ) : (\n        'We have no cast for this movie'\n      )}\n    </CastContainer>\n  );\n};\n\nexport default Cast;"],"names":["axios","_KEY","getTrendMovies","response","data","console","log","getSearchedMovies","query","getMovieDetails","movieId","getMovieCredits","getMovieRewiews","CastWrapper","styled","Photo","Name","Character","actors","map","character","profile_path","original_name","credit_id","src","alt","CastContainer","id","useParams","useState","credits","setCredits","useEffect","cast","getCredits","length"],"sourceRoot":""}